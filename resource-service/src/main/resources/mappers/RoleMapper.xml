<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jnshu.resourceservice.dao.RoleMapper">

  <resultMap id="BaseResultMap" type="com.jnshu.resourceservice.entity.Role">
    <id column="id" property="id"/>
    <result column="role_name" property="roleName"/>
    <result column="gmt_create" property="gmtCreate"/>
    <result column="gmt_update" property="gmtUpdate"/>
    <result column="create_by" property="createBy"/>
    <result column="update_by" property="updateBy"/>
    <result column="status" property="status"/>
    <collection property="permissionsList" ofType="com.jnshu.resourceservice.entity.Permission"
                javaType="list">
        <id column="p_id" property="id"/>
        <result column="permission_name" property="permissionName"/>
        <result column="p_gmt_create" property="gmtCreate"/>
        <result column="p_gmt_update" property="gmtUpdate"/>
        <result column="p_create_by" property="createBy"/>
        <result column="p_update_by" property="updateBy"/>
    </collection>
  </resultMap>


  <sql id="Base_Column_List">
    id, role_name, gmt_create, gmt_update, create_by, update_by, status
  </sql>

  <select id="selectByPrimaryKey" parameterType="int" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from role
    where id = #{id}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from role
    where id = #{id}
  </delete>

  <insert id="insert" parameterType="com.jnshu.resourceservice.entity.Role">
    insert into role (id, role_name, gmt_create, 
      gmt_update, create_by, update_by, 
      status)
    values (#{id}, #{roleName}, #{gmtCreate},
      #{gmtUpdate}, #{createBy}, #{updateBy},
      #{status})
  </insert>
  <insert id="insertSelective" parameterType="com.jnshu.resourceservice.entity.Role">
    --         此种写法，keyProperty：将查询到主键值设置到parameterType指定的对象的哪个属性
    --         order：SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序
    --         resultType：指定SELECT LAST_INSERT_ID()的结果类型
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into role
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="roleName != null">
        role_name,
      </if>
      <if test="gmtCreate != null">
        gmt_create,
      </if>
      <if test="gmtUpdate != null">
        gmt_update,
      </if>
      <if test="createBy != null">
        create_by,
      </if>
      <if test="updateBy != null">
        update_by,
      </if>
      <if test="status != null">
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id},
      </if>
      <if test="roleName != null">
        #{roleName},
      </if>
      <if test="gmtCreate != null">
        #{gmtCreate},
      </if>
      <if test="gmtUpdate != null">
        #{gmtUpdate},
      </if>
      <if test="createBy != null">
        #{createBy},
      </if>
      <if test="updateBy != null">
        #{updateBy},
      </if>
      <if test="status != null">
        #{status},
      </if>
    </trim>
  </insert>

    <update id="updateByPrimaryKeySelective" parameterType="com.jnshu.resourceservice.entity.Role">
    update role
    <set>
      <if test="roleName != null">
        role_name = #{roleName},
      </if>
      <if test="gmtCreate != null">
        gmt_create = #{gmtCreate},
      </if>
      <if test="gmtUpdate != null">
        gmt_update = #{gmtUpdate},
      </if>
      <if test="createBy != null">
        create_by = #{createBy},
      </if>
      <if test="updateBy != null">
        update_by = #{updateBy},
      </if>
      <if test="status != null">
        status = #{status},
      </if>
    </set>
    where id = #{id}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jnshu.resourceservice.entity.Role">
    update role
    set role_name = #{roleName},
      gmt_create = #{gmtCreate},
      gmt_update = #{gmtUpdate},
      create_by = #{createBy},
      update_by = #{updateBy},
      status = #{status}
    where id = #{id}
  </update>

  <select id="selectRolePermissionById" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    SELECT
	r.id,
	r.role_name,
	r.gmt_create,
	r.gmt_update,
	r.create_by,
	r.update_by,
	r.`status`,
	p.id p_id,
	p.permission_name,
	p.gmt_create p_gmt_create,
	p.gmt_update p_gmt_update,
	p.create_by p_create_by,
	p.update_by p_update_by
    FROM
	(role AS r LEFT JOIN role_permission AS rp ON r.id = rp.role_id)
	RIGHT JOIN permission AS p ON rp.node_id = p.id
    WHERE
	r.id = #{id}
  </select>

  <select id="selectByRoleName" resultMap="BaseResultMap">
     SELECT
	r.id,
	r.role_name,
	r.gmt_create,
	r.gmt_update,
	r.create_by,
	r.update_by,
	r.`status`,
	p.id p_id,
	p.permission_name,
	p.gmt_create p_gmt_create,
	p.gmt_update p_gmt_update,
	p.create_by p_create_by,
	p.update_by p_update_by
    FROM
	(role AS r LEFT JOIN role_permission AS rp ON r.id = rp.role_id)
	RIGHT JOIN permission AS p ON rp.node_id = p.id
    WHERE
	r.role_name = #{roleName}

</select>
  <select id="selectAll" resultMap="BaseResultMap">
    SELECT
	r.id,
	r.role_name,
	r.gmt_create,
	r.gmt_update,
	r.create_by,
	r.update_by,
	r.`status`
    FROM (role AS r
	LEFT JOIN role_permission AS rp ON r.id = rp.role_id)
	RIGHT JOIN permission AS p ON rp.node_id = p.id
    WHERE
	r.`status` = 1
	ORDER BY r.gmt_update
  </select>

</mapper>